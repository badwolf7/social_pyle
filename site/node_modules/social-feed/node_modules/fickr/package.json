{
  "name": "fickr",
  "version": "0.1.2",
  "description": "A simplified browser/node Javascript wrapper for the Flickr API.",
  "main": "./fickr",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/blackchair/flickr.js"
  },
  "dependencies": {
    "form-data": "0.1.2"
  },
  "keywords": [
    "flickr"
  ],
  "author": {
    "name": "David NoÃ«l"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "91ca4c83c62a58896ac8c850a4f9f2232b7741de",
  "readme": "#fickr\n\nSo, the [Flickr API](http://www.flickr.com/services/api/) is really\nfull-featured but it does a few things that make it annoying to use:\n\n * The auth system is currently in a state of flux between their previous\nnon-standard system and the OAuth 1.0 standard, so documentation references to\nan \"API key\" aren't terribly clear.\n * Cross-origin resource sharing (CORS) is not enabled, so making API requests\nfrom a browser is a pain in the ass.\n * Their API and its documentation devote a lot of space to the social features\nof Flickr, which is fine but outside what I can only assume is the 95% use case\nfor Flickr API integrations: displaying and uploading photos belonging to a\nsingle user.\n\nfickr optimizes for that use case, and takes care of all the necessary\nbullshit for making as many API requests from the browser as possible despite\nthe CORS limitation. If you *only* need Flickr access from the server, this is\nprobably the wrong library to use, but if you want to access Flickr from the\nbrowser and keep the option of re-using some of that code on the server,\nflickr.js is just what you need.\n\n##Usage\n\n```\nnpm install fickr\n```\n\n**NB. You'll need a\n[consumer key and secret](http://www.flickr.com/services/apps/create/apply/)\nbefore you can try any of this.**\n\nTo get a user key and secret (this part only works with Node.js due to CORS):\n\n```javascript\n\nvar fickr = require('fickr')\n\nfickr.getAuthURL(\n  <consumerKey>,    //developer key from Flickr\n  <consumerSecret>, //...\n  <callbackURL>,    //an http(s) URL to which the user will be directed\n                    //after authenticating your app\n  <callback>)       //callback function, receives single URL\n\n```\n\nFor test purposes, you can run that in your Node.js REPL with `console.log` as\nthe callback. In production you'll probably want the callback to re-direct the\nuser to the URL provided. Either way, the URL goes to Flickr's OAuth permission\npage. If the user agrees to give read/write permissions to your app (all Flickr\nOAuth apps require it) they will be re-directed to the callback URL (the one\nthat was passed to `getAuthURL`) with a query string containing values for an\nOAuth request token and a request verifier. Once you have those values:\n\n```javascript\n\nfickr.getAccessToken(<requestToken>,<requestVerifier>,<callback>)\n\n```\n\nwill return an object containing user data containing their OAuth credentials\nfor your app (as well as their name, NSID, etc.) Those credentials will remain\nactive until Flickr or the user decide to deactivate them, so if you store them\nyou can save yourself from having to re-authenticate your users with Flickr\nevery time.\n\nIn either the browser or the server, once you have a user's credentials, you\ncan enable the rest of the library's functionality by calling `fickr.init`\nas follows:\n\n```javascript\n\nfickr.init(<consumerKey>,<consumerSecret>,<userID>,<userKey>,<userSecret>)\n\n```\n\nNow, to access your user's Flickr photos on their behalf, fickr provides\nthree simple read functions and one write (upload) functions:\n\n * `fickr.fetch(<callback>[,<page>])` calls [flickr.people.getPhotos](http://www.flickr.com/services/api/flickr.people.getPhotos.html)\nwith the optional `page` number for deeper queries.\n * `fickr.search(<callback>,<options>)` calls [flickr.photos.search](http://www.flickr.com/services/api/flickr.photos.search.html)\nusing the options defined in the [Flickr API reference](http://www.flickr.com/services/api/flickr.photos.search.html).\nUser ID is set automatically.\n * `fickr.listTags(<callback>)` is a convenience function calling\n[flickr.tags.getListUser](http://www.flickr.com/services/api/flickr.tags.getListUser.html)\nIt's useful in generating typeaheads for search or upload tagging utilities.\n * `fickr.upload(<callback>,<fileBuffer or fileInputFormElement>,<options>)`\nis the most complicated function. In the browser, the three previous functions\nare accomplished via JSONP due to the CORS limitation. This one is accomplished\nusing an iframe transport method to get around the same limitation. It\nessentially builds a file upload form in an invisible iframe and submits it to\n[http://up.flickr.com/services/upload/](http://www.flickr.com/services/api/upload.api.html)\nIn order to do that, it manipulates a pre-filled file input DOM element, so\nthat is what it accepts as the second parameter in the browser. Also, since the\niframe POST method doesn't have access to the HTTP response, we use a polling\nmethod to determine whether or not the upload worked, and return an object\ncontaining the most recent `fickr.fetch` result when it's different from the\none before upload (ie. there is a new photo since the upload began). This is a\ngross hack, and far from bulletproof, but way better than nothing. On the\nserver, everything's easier: just pass a Buffer containing the file's contents\nand your callback will see the normal HTTP response.\n",
  "bugs": {
    "url": "https://github.com/blackchair/flickr.js/issues"
  },
  "homepage": "https://github.com/blackchair/flickr.js",
  "_id": "fickr@0.1.2",
  "_shasum": "74832c32380f4d0bd21b4f7b0c64ec2fbe7dd77f",
  "_from": "fickr@~0.1.0",
  "_resolved": "https://registry.npmjs.org/fickr/-/fickr-0.1.2.tgz"
}
