{
  "name": "sequelize-hierarchy",
  "version": "0.2.7",
  "description": "Nested hierarchies for Sequelize",
  "main": "./lib/",
  "author": {
    "name": "Overlook Motel"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/overlookmotel/sequelize-hierarchy.git"
  },
  "bugs": {
    "url": "https://github.com/overlookmotel/sequelize-hierarchy/issues"
  },
  "dependencies": {
    "lodash": "2.4.1"
  },
  "peerDependencies": {
    "sequelize": "2.0.0-rc3"
  },
  "devDependencies": {
    "mocha": "2.0.x",
    "chai": "1.9.x",
    "chai-as-promised": "4.1.x",
    "sequelize": "2.0.0-rc3",
    "mysql": "~2.5.0",
    "sqlite3": "~3.0.0",
    "pg": "~3.6.0",
    "mariasql": "~0.1.2",
    "jshint": "2.5.x"
  },
  "keywords": [
    "sequelize",
    "sequelize-plugin",
    "hierarchy",
    "nested",
    "tree"
  ],
  "scripts": {
    "test": "make all"
  },
  "engines": {
    "node": ">=0.6.21"
  },
  "readmeFilename": "README.md",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/overlookmotel/sequelize-hierarchy/raw/master/License"
    }
  ],
  "readme": "# sequelize-hierarchy.js\n\n# Nested hierarchies for Sequelize\n\n## What's it for?\n\nRelational databases aren't very good at dealing with nested hierarchies.\n\nExamples of hierarchies are:\n\n* Nested folders where each folder has many subfolders, those subfolders themselves have subfolders, and so on\n* Categories and sub-categories e.g. for a newspaper with sections for different sports, Sports category splits into Track Sports and Water Sports, Water Sports into Swimming and Diving, Diving into High Board, Middle Board and Low Board etc\n* Tree structures\n\nTo store a hierarchy in a database, the usual method is to give each record a ParentID field which says which is the record one level above it.\n\nFetching the parent or children of any record is easy, but if you want to retrieve an entire tree/hierarchy structure from the database, it requires multiple queries, recursively getting each level of the hierarchy. For a big tree structure, this is a lengthy process, and annoying to code.\n\nThis plugin for [Sequelize](http://sequelizejs.com/) solves this problem.\n\n## Current status\n\n[![Build Status](https://secure.travis-ci.org/overlookmotel/sequelize-hierarchy.png?branch=master)](http://travis-ci.org/overlookmotel/sequelize-hierarchy)\n[![Dependency Status](https://david-dm.org/overlookmotel/sequelize-hierarchy.png)](https://david-dm.org/overlookmotel/sequelize-hierarchy)\n\nAPI is stable. All features and options are fairly well tested. Works with all dialects of SQL supported by Sequelize (MySQL, Postgres, SQLite).\n\nRequires Sequelize v2.0.0-rc3 or later.\n\n## Usage\n\n### Loading module\n\nTo load module:\n\n\tvar Sequelize = require('sequelize-hierarchy')();\n\t// NB Sequelize must also be present in `node_modules`\n\nor, a more verbose form useful if chaining multiple Sequelize plugins:\n\n\tvar Sequelize = require('sequelize');\n\trequire('sequelize-hierarchy')(Sequelize);\n\n### Initializing hierarchy\n#### Model#isHierarchy( [options] )\n\n\tvar sequelize = new Sequelize('database', 'user', 'password');\n\n\tvar folder = sequelize.define('folder', name: { type: Sequelize.STRING });\n\tfolder.isHierarchy();\n\n`folder.isHierarchy()` does the following:\n\n* Adds a column `parentId` to Folder model\n* Adds a column `hierarchyLevel` to Folder model (which should not be updated directly)\n* Creates a new model `folderAncestor` which contains the ancestry information\n* Creates hooks into standard Sequelize methods (create, update, destroy etc) to automatically update the ancestry table as details in the folder table change\n* Creates hooks into Sequelize's `Model#find()` and `Model#findAll()` methods so that hierarchies can be returned as javascript object tree structures\n\nThe column and table names etc can be modified by passing options to `.isHierarchy()`. See below for details.\n\n#### via Sequelize#define() options\n\nHierarchies can also be created in `define()`:\n\n\tvar folder = sequelize.define('folder', { name: Sequelize.STRING }, { hierarchy: true });\n\nor on an attribute in `define()`:\n\n\tvar folder = sequelize.define('folder', {\n\t\tname: Sequelize.STRING,\n\t\tparentId: {\n\t\t\ttype: Sequelize.INTEGER.UNSIGNED,\n\t\t\thierarchy: true\n\t\t}\n\t});\n\n### Retrieving hierarchies\n\nExamples of getting a hierarchy structure:\n\n\t// get entire hierarchy as a flat list\n\tfolder.findAll().then(function(results) {\n\t\t// results = [\n\t\t//\t{ id: 1, parentId: null, name: 'a' },\n\t\t//\t{ id: 2, parentId: 1, name: 'ab' },\n\t\t//\t{ id: 3, parentId: 2, name: 'abc' }\n\t\t// ]\n\t})\n\n\t// get entire hierarchy as a nested tree\n\tfolder.findAll({ hierarchy: true }).then(function(results) {\n\t\t// results = [\n\t\t//\t{ id: 1, parentId: null, name: 'a', children: [\n\t\t//\t\t{ id: 2, parentId: 1, name: 'ab', children: [\n\t\t//\t\t\t{ id: 3, parentId: 2, name: 'abc' }\n\t\t//\t\t] }\n\t\t//\t] }\n\t\t// ]\n\t})\n\n\t// get all the descendents of a particular item\n\tfolder.find({ where: { name: 'a' }, include: { model: folder, as: 'descendents', hierarchy: true } }).then(function(result) {\n\t\t// result =\n\t\t// { id: 1, parentId: null, name: 'a', children: [\n\t\t//\t\t{ id: 2, parentId: 1, name: 'ab', children: [\n\t\t//\t\t\t{ id: 3, parentId: 2, name: 'abc' }\n\t\t//\t\t] }\n\t\t// ] }\n\t})\n\n\t// get all the ancestors (i.e. parent and parent's parent and so on)\n\tfolder.find({\n\t\twhere: { name: 'abc' },\n\t\tinclude: [ { model: folder, as: 'ancestors' } ],\n\t\torder: [ [ { model: folder, as: 'ancestors' }, 'hierarchyLevel' ] ]\n\t}).then(function(result) {\n\t\t// results = [\n\t\t//\t{ id: 3, parentId: 2, name: 'abc', ancestors: [\n\t\t//\t\t{ id: 1, parentId: null, name: 'a' },\n\t\t//\t\t{ id: 2, parentId: 1, name: 'ab' }\n\t\t//\t] }\n\t\t// ]\n\t})\n\nThe forms with `{ hierarchy: true }` are equivalent to using `folder.findAll({ include: { model: folder, as: 'children' } })` except that the include is recursed however deeply the tree structure goes.\n\n### Accessors\n\nAccessors are also supported:\n\n\tthisFolder.getParent()\n\tthisFolder.getChildren()\n\tthisFolder.getAncestors()\n\tthisFolder.getDescendents()\n\n### Options\n\nThe following options can be passed to `Model#isHierarchy( options )`.\nDefaults are inherited from `sequelize.options.hierarchy` if defined in call to `new Sequelize()`.\n\n#### Aliases for relations\n\n* `as`: Name of parent association. Defaults to `'parent'`\n* `childrenAs`: Name of children association. Defaults to `'children'`\n* `ancestorsAs`: Name of ancestors association. Defaults to `'ancestors'`\n* `descendentsAs`: Name of descendents association. Defaults to `'descendents'`\n\nThese affect the naming of accessors e.g. `instance.getParent()`\n\n#### Fields\n\n* `levelFieldName`: Name of the hierarchy depth field. Defaults to `'hierarchyLevel'`\n* `levelFieldType`: Type of the hierarchy depth field. Defaults to `Sequelize.INTEGER.UNSIGNED`\n* `levelFieldAttributes`: Attributes to add to the hierarchy depth field. Defaults to `undefined`\n* `foreignKey`: Name of the parent field. Defaults to `'parentId'`\n* `foreignKeyAttributes`: Attributes to add to the parent field. Defaults to `undefined`\n* `throughKey`: Name of the instance field in hierarchy (through) table. Defaults to `'<model name>Id'`\n* `throughForeignKey`: Name of the ancestor field in hierarchy (through) table. Defaults to `'ancestorId'`\n\n#### Hierarchy (through) table\n\n* `through`: Name of hierarchy (through) model. Defaults to `'<model name>ancestor'`\n* `throughTable`: Name of hierarchy (through) table. Defaults to `'<model name plural>ancestors'`\n\n* `freezeTableName`: When `true`, through table name is same as through model name. Inherits from sequelize define options\n* `camelThrough`: When `true`, through model name and table name are camelized (i.e. `folderAncestor` not `folderancestor`). Inherits from sequelize define options\n\n#### Misc\n\n* `labels`: When `true`, creates an attribute `label` on the created `parentId` and `hierarchyField` which is a human-readable version of the field name. Inherits from sequelize define options or `false`\n\n### Rebuilding the hierarchy\n#### Model#rebuildHierarchy( [options] )\n\nTo build the hierarchy data on an existing table, or if hierarchy data gets corrupted in some way (e.g. by changes to parentId being made directly in the database not through Sequelize), you can rebuild it with:\n\n\tfolder.rebuildHierarchy()\n\n## Tests\n\nUse `npm test` to run the tests.\nRequires a database called 'sequelize_test' and a db user 'sequelize_test' with no password.\n\n## Changelog\n\nSee changelog.md\n\n## TODO\n\n* Create more efficient function for bulkCreate (+ alter sequelize bulkCreate to do single multi-row insertion?). Would not affect API or behaviour, just improve performance.\n\n## Known issues\n\n* beforeUpdate hook function assumes that item has not been updated since it was originally retrieved from DB\n* All hooks should be within transactions\n\nIf you discover a bug, please raise an issue on Github. https://github.com/overlookmotel/sequelize-hierarchy/issues\n",
  "homepage": "https://github.com/overlookmotel/sequelize-hierarchy",
  "_id": "sequelize-hierarchy@0.2.7",
  "_shasum": "194fac758afb86ffe1ff66736b774f64d2d60b0c",
  "_from": "sequelize-hierarchy@",
  "_resolved": "https://registry.npmjs.org/sequelize-hierarchy/-/sequelize-hierarchy-0.2.7.tgz"
}
